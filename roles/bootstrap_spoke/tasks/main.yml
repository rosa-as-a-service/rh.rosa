---
# tasks file for bootstrap-spoke
- name: Ensure AWS long lived credentials are configured on the bastion
  ansible.builtin.shell:
    cmd: |
      export AWS_DEFAULT_PROFILE=rosa_
      aws configure set region ap-southeast-2 --profile rosa_{{ rosa_cluster_name }}
      aws configure set aws_access_key_id "{{ aws_access_key_id }}" --profile rosa_{{ rosa_cluster_name }}
      aws configure set aws_secret_access_key "{{ aws_secret_access_key }}" --profile rosa_{{ rosa_cluster_name }}
      aws configure set profile rosa_{{ rosa_cluster_name }}
      rosa login --token "{{ rosa_token }}"
  no_log: true
  changed_when: false

- name: Get Hub cluster API URL
  ansible.builtin.shell:
    cmd: |
      export AWS_DEFAULT_PROFILE=rosa_{{ rosa_cluster_name }}
      rosa describe cluster --cluster=hub --output=json | jq -r '.api.url'
  register: hub_api_url
  failed_when: "'Not logged in' in hub_api_url.stderr or 'Failed to find credentials' in hub_api_url.stderr"

- name: Set Hub API URL
  ansible.builtin.set_fact:
    hub_api_url: "{{ hub_api_url.stdout }}"

- name: Get cluster API URL
  ansible.builtin.shell:
    cmd: |
      export AWS_DEFAULT_PROFILE=rosa_{{ rosa_cluster_name }}
      rosa describe cluster --cluster={{ rosa_cluster_name }} --output=json | jq -r '.api.url'
  register: api_url
  failed_when: "'Not logged in' in api_url.stderr or 'Failed to find credentials' in api_url.stderr"

- name: Set Spoke API URL
  ansible.builtin.set_fact:
    api_url: "{{ api_url.stdout }}"

- name: Get cluster base domain
  ansible.builtin.shell:
    cmd: |
      export AWS_DEFAULT_PROFILE=rosa_{{ rosa_cluster_name }}
      rosa describe cluster --cluster={{ rosa_cluster_name }} --output=json | jq -r '.dns.base_domain'
  register: rosa_cluster_base_domain_result
  failed_when: "'Not logged in' in rosa_cluster_base_domain_result.stderr or 'Failed to find credentials' in rosa_cluster_base_domain_result.stderr"

- name: Set ROSA cluster base domain
  ansible.builtin.set_fact:
    _rosa_base_domain: "{{ rosa_cluster_base_domain_result.stdout }}"

- name: Get Hub cluster infra ID
  ansible.builtin.shell:
    cmd: |
      export AWS_DEFAULT_PROFILE=rosa_{{ rosa_cluster_name }}
      rosa describe cluster --cluster=hub --output=json | jq -r '.infra_id'
  register: rosa_hub_cluster_infra_id_result
  failed_when: "'Not logged in' in rosa_hub_cluster_infra_id_result.stderr or 'Failed to find credentials' in rosa_hub_cluster_infra_id_result.stderr"

- name: Set ROSA Hub cluster infra ID
  ansible.builtin.set_fact:
    _rosa_hub_cluster_infra_id: "{{ rosa_hub_cluster_infra_id_result.stdout }}"

- name: Get Spoke cluster infra ID
  ansible.builtin.shell:
    cmd: |
      export AWS_DEFAULT_PROFILE=rosa_{{ rosa_cluster_name }}
      rosa describe cluster --cluster={{ rosa_cluster_name }} --output=json | jq -r '.infra_id'
  register: rosa_cluster_infra_id_result
  failed_when: "'Not logged in' in rosa_cluster_infra_id_result.stderr or 'Failed to find credentials' in rosa_cluster_infra_id_result.stderr"

- name: Set ROSA cluster infra ID
  ansible.builtin.set_fact:
    _rosa_cluster_infra_id: "{{ rosa_cluster_infra_id_result.stdout }}"

- name: Retrieve Hub authentication token
  community.okd.openshift_auth:
    username: "{{ rosa_admin_username }}"
    password: "{{ rosa_admin_password }}"
    host: "{{ hub_api_url }}"
    validate_certs: false
  register: hub_openshift_auth_results

- name: Retrieve authentication token
  community.okd.openshift_auth:
    username: "{{ rosa_admin_username }}"
    password: "{{ rosa_admin_password }}"
    host: "{{ api_url }}"
    validate_certs: false
  register: openshift_auth_results
  delegate_to: "{{ spoke_bastion }}"

- name: Configure PrivateLink
  ansible.builtin.import_tasks: configure_privatelink.yml

- name: configure managed cluster
  kubernetes.core.k8s:
    resource_definition: "{{ lookup('ansible.builtin.template', 'managedcluster.yml') }}"
    host: "{{ hub_api_url }}"
    api_key: "{{ hub_openshift_auth_results.openshift_auth.api_key }}"
    validate_certs: false

- name: configure spoke secret
  kubernetes.core.k8s:
    resource_definition: "{{ lookup('ansible.builtin.template', 'spokesecret.yml') }}"
    host: "{{ hub_api_url }}"
    api_key: "{{ hub_openshift_auth_results.openshift_auth.api_key }}"
    validate_certs: false

- name: configure klusterlet addon
  kubernetes.core.k8s:
    resource_definition: "{{ lookup('ansible.builtin.template', 'klusterletaddon.yml') }}"
    host: "{{ hub_api_url }}"
    api_key: "{{ hub_openshift_auth_results.openshift_auth.api_key }}"
    validate_certs: false

# This namespace is later managed by Red Hat Advanced Cluster Management for Kubernetes - Amazon S3 Operator, but is required for the initial bootstrapping to complete
- name: configure openshift-logging project
  kubernetes.core.k8s:
    host: "{{ hub_api_url }}"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
    validate_certs: false
    resource_definition:
      kind: Project
      apiVersion: project.openshift.io/v1
      metadata:
        name: openshift-logging
        labels:
          kubernetes.io/metadata.name: openshift-logging
  failed_when: false

- name: openshift-logging secret
  kubernetes.core.k8s:
    host: "{{ hub_api_url }}"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
    validate_certs: false
    resource_definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: aws-credentials
        namespace: openshift-logging
      type: Opaque
      stringData:
        aws_access_key_id: "{{ aws_access_key_id | b64encode}}"
        aws_secret_access_key: "{{ aws_secret_access_key | b64encode }}"

