---
# tasks file for bootstrap-hub
- name: Ensure AWS long lived credentials are configured on the bastion
  ansible.builtin.shell:
    cmd: |
      export AWS_DEFAULT_PROFILE=rosa
      aws configure set region ap-southeast-2 --profile rosa
      aws configure set aws_access_key_id "{{ aws_access_key_id }}" --profile rosa
      aws configure set aws_secret_access_key "{{ aws_secret_access_key }}" --profile rosa
      aws configure set profile rosa
      rosa login --token "{{ rosa_token }}"
  no_log: true
  changed_when: false

- name: Get cluster API URL
  ansible.builtin.shell:
    cmd: |
      export AWS_DEFAULT_PROFILE=rosa
      rosa describe cluster --cluster={{ rosa_cluster_name }} --output=json | jq -r '.dns.base_domain'
  register: api_base_domain
  failed_when: "'Not logged in' in api_base_domain.stderr"

- name: Set Hub API URL
  ansible.builtin.set_fact:
    boostrap_hub_api_url: "https://api.{{ rosa_cluster_name }}.{{ api_base_domain.stdout }}:6443"

- name: Retrieve authentication token
  community.okd.openshift_auth:
    username: "{{ rosa_admin_username }}"
    password: "{{ rosa_admin_password }}"
    host: "{{ boostrap_hub_api_url }}"
    validate_certs: false
  register: openshift_auth_results

- name: configure argocd namespace
  kubernetes.core.k8s:
    resource_definition: "{{ lookup('ansible.builtin.file', 'namespace.yml') }}"
    host: "{{ boostrap_hub_api_url }}"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
    validate_certs: false
  failed_when: false

- name: configure argocd operatorgroup
  kubernetes.core.k8s:
    resource_definition: "{{ lookup('ansible.builtin.file', 'operatorgroup.yml') }}"
    host: "{{ boostrap_hub_api_url }}"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
    validate_certs: false

- name: configure argocd subscription
  kubernetes.core.k8s:
    resource_definition: "{{ lookup('ansible.builtin.file', 'subscription.yml') }}"
    host: "{{ boostrap_hub_api_url }}"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
    validate_certs: false
  failed_when: false

- name: wait for ArgoCD to start deploying
  ansible.builtin.pause:
    echo: no
    prompt: "Waiting for ArgoCD to start deploying"
    seconds: 10

- name: configure argocd subscription - retry
  kubernetes.core.k8s:
    resource_definition: "{{ lookup('ansible.builtin.file', 'subscription.yml') }}"
    host: "{{ boostrap_hub_api_url }}"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
    validate_certs: false
  register: deploy_argocd
  until: "deploy_argocd.result.status.state == 'AtLatestKnown'"
  retries: 10
  delay: 10

- name: configure argocd cluster role binding
  kubernetes.core.k8s:
    resource_definition: "{{ lookup('ansible.builtin.file', 'clusterrolebinding.yml') }}"
    host: "{{ boostrap_hub_api_url }}"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
    validate_certs: false

- name: configure argocd repo
  kubernetes.core.k8s:
    resource_definition: "{{ lookup('ansible.builtin.template', 'repo.yml') }}"
    host: "{{ boostrap_hub_api_url }}"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
    validate_certs: false

- name: configure argocd initial application
  kubernetes.core.k8s:
    resource_definition: "{{ lookup('ansible.builtin.template', 'application.yml') }}"
    host: "{{ boostrap_hub_api_url }}"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
    validate_certs: false

# This namespace is later managed by GitOps, but is required for the initial bootstrapping to complete
- name: configure rosa-as-a-service project
  kubernetes.core.k8s:
    host: "{{ boostrap_hub_api_url }}"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
    validate_certs: false
    resource_definition:
      kind: Project
      apiVersion: project.openshift.io/v1
      metadata:
        name: rosa-as-a-service
        labels:
          kubernetes.io/metadata.name: rosa-as-a-service
  failed_when: false


- name: configure AAP SSO secret
  kubernetes.core.k8s:
    host: "{{ boostrap_hub_api_url }}"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
    validate_certs: false
    resource_definition:
      kind: Secret
      apiVersion: v1
      metadata:
        name: oidc
        namespace: rosa-as-a-service
      data:
        key: "{{ sso_oidc_key | b64encode }}"
        secret: "{{ sso_oidc_secret | b64encode }}"
        endpoint: "{{ sso_oidc_endpoint | b64encode }}"
        verify-ssl: "{{ sso_oidc_verify_ssl | default('true') | b64encode }}"

# Possibly use ODF + Multicloud Object Gateway instead
# This namespace is later managed by Amazon Controller for Kubernetes - Amazon S3 Operator, but is required for the initial bootstrapping to complete
- name: configure ack-system project
  kubernetes.core.k8s:
    host: "{{ boostrap_hub_api_url }}"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
    validate_certs: false
    resource_definition:
      kind: Project
      apiVersion: project.openshift.io/v1
      metadata:
        name: ack-system
        labels:
          kubernetes.io/metadata.name: ack-system
  failed_when: false

- name: configure ack-s3-user-secrets
  kubernetes.core.k8s:
    host: "{{ boostrap_hub_api_url }}"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
    validate_certs: false
    resource_definition:
      kind: Secret
      apiVersion: v1
      metadata:
        name: ack-s3-user-secrets
        namespace: ack-system
      data:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key_id | b64encode}}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key | b64encode }}"
      type: Opaque

- name: configure ack-s3-user-config
  kubernetes.core.k8s:
    host: "{{ boostrap_hub_api_url }}"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
    validate_certs: false
    resource_definition:
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: ack-s3-user-config
        namespace: ack-system
      immutable: false
      data:
        ACK_ENABLE_DEVELOPMENT_LOGGING: 'false'
        ACK_LOG_LEVEL: info
        ACK_RESOURCE_TAGS: rosa-as-a-service
        ACK_WATCH_NAMESPACE: ''
        AWS_REGION: ap-southeast-2
        ENABLE_LEADER_ELECTION: 'true'
        LEADER_ELECTION_NAMESPACE: ''

# This namespace is later managed by Red Hat Advanced Cluster Management for Kubernetes - Amazon S3 Operator, but is required for the initial bootstrapping to complete
- name: configure open-cluster-management-observability project
  kubernetes.core.k8s:
    host: "{{ boostrap_hub_api_url }}"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
    validate_certs: false
    resource_definition:
      kind: Project
      apiVersion: project.openshift.io/v1
      metadata:
        name: open-cluster-management-observability
        labels:
          kubernetes.io/metadata.name: open-cluster-management-observability
  failed_when: false

- name: acm observability secret
  kubernetes.core.k8s:
    host: "{{ boostrap_hub_api_url }}"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
    validate_certs: false
    resource_definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: thanos-object-storage
        namespace: open-cluster-management-observability
      type: Opaque
      stringData:
        thanos.yaml: |
          type: s3
          config:
            bucket: "{{ 'rhacm-observability-thanos'  }}"
            endpoint: s3.ap-southeast-2.amazonaws.com
            insecure: true
            access_key: "{{ aws_access_key_id | b64encode}}"
            secret_key: "{{ aws_secret_access_key | b64encode }}"