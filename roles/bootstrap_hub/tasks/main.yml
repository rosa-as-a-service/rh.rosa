---
# tasks file for bootstrap-hub
- name: Retrieve authentication token
  community.okd.openshift_auth:
    username: "{{ rosa_admin_username }}"
    password: "{{ rosa_admin_password }}"
    host: https://api.hub.575m.p1.openshiftapps.com:6443
  register: openshift_auth_results

- name: configure argocd namespace
  kubernetes.core.k8s:
    src: "namespace.yml"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
  failed_when: false

- name: configure argocd operatorgroup
  kubernetes.core.k8s:
    src: "operatorgroup.yml"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"

- name: wait for ArgoCD to start deploying
  ansible.builtin.pause:
    echo: no
    prompt: "Waiting for ArgoCD to start deploying"
    seconds: 10

- name: configure argocd subscription
  kubernetes.core.k8s:
    src: "subscription.yml"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
  register: deploy_argocd
  until: "deploy_argocd.result.status.state == 'AtLatestKnown'"
  retries: 10
  delay: 10

- name: configure argocd cluster role binding
  kubernetes.core.k8s:
    src: "clusterrolebinding.yml"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"

- name: configure argocd repo
  kubernetes.core.k8s:
    template: "repo.yml"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"

# - name: configure argocd route
#   kubernetes.core.k8s:
#     template: "route.yml"

- name: configure argocd initial application
  kubernetes.core.k8s:
    template: "application.yml"
    api_key: "{{ openshift_auth_results.openshift_auth.api_key }}"
# - name: configure ROSA SSO secret
#   kubernetes.core.k8s:
#     resource_definition:
#         kind: Secret
#         apiVersion: v1
#         metadata:
#         name: oidc
#         namespace: rosa-as-a-service
#         data:
#         key: "{{ sso_oidc_key | b64encode }}"
#         secret: "{{ sso_oidc_secret | b64encode }}"
#         endpoint: "{{ sso_oidc_endpoint | b64encode }}"
#         verify-ssl: "{{ sso_oidc_verify_ssl | b64encode }}"

# # This namespace is later managed by GitOps, but is required for the initial bootstrapping to complete
# - name: configure cert-manager project
#   kubernetes.core.k8s:
#     resource_definition:
#         kind: Project
#         apiVersion: project.openshift.io/v1
#         metadata:
#         name: cert-manager
#         labels:
#             kubernetes.io/metadata.name: cert-manager
#     failed_when: false

# - name: configure cert-manager route53 secret
#   kubernetes.core.k8s:
#     resource_definition:
#         kind: Secret
#         apiVersion: v1
#         metadata:
#         name: route53-credentials-secret
#         namespace: cert-manager
#         data:
#         access-key-id: "{{ access_key_id | b64encode}}"
#         secret-access-key: "{{ secret_access_key | b64encode }}"
#         type: Opaque

# Possibly use ODF + Multicloud Object Gateway instead
# # This namespace is later managed by Amazon Controller for Kubernetes - Amazon S3 Operator, but is required for the initial bootstrapping to complete
# - name: configure ack-system project
#   kubernetes.core.k8s:
#     resource_definition:
#       kind: Project
#       apiVersion: project.openshift.io/v1
#       metadata:
#         name: ack-system
#         labels:
#           kubernetes.io/metadata.name: ack-system
#   failed_when: false

# - name: configure ack-s3-user-secrets
#   kubernetes.core.k8s:
#     resource_definition:
#       kind: Secret
#       apiVersion: v1
#       metadata:
#         name: ack-s3-user-secrets
#         namespace: ack-system
#       data:
#         AWS_ACCESS_KEY_ID: "{{ access_key_id | b64encode}}"
#         AWS_SECRET_ACCESS_KEY: "{{ secret_access_key | b64encode }}"
#       type: Opaque

# - name: configure ack-s3-user-config
#   kubernetes.core.k8s:
#     resource_definition:
#       kind: ConfigMap
#       apiVersion: v1
#       metadata:
#         name: ack-s3-user-config
#         namespace: ack-system
#       immutable: false
#       data:
#         ACK_ENABLE_DEVELOPMENT_LOGGING: 'false'
#         ACK_LOG_LEVEL: info
#         ACK_RESOURCE_TAGS: rosa-as-a-service
#         ACK_WATCH_NAMESPACE: ''
#         AWS_REGION: ap-southeast-2
#         ENABLE_LEADER_ELECTION: 'true'
#         LEADER_ELECTION_NAMESPACE: ''