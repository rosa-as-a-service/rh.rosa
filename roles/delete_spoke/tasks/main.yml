---
- name: Ensure AWS long lived credentials are configured on the bastion
  ansible.builtin.shell:
    cmd: |
      export AWS_DEFAULT_PROFILE=rosa_{{ rosa_cluster_name }}
      aws configure set region ap-southeast-2 --profile rosa_{{ rosa_cluster_name }}
      aws configure set aws_access_key_id "{{ aws_access_key_id }}" --profile rosa_{{ rosa_cluster_name }}
      aws configure set aws_secret_access_key "{{ aws_secret_access_key }}" --profile rosa_{{ rosa_cluster_name }}
      aws configure set profile rosa_{{ rosa_cluster_name }}
      rosa login --token "{{ rosa_token }}"
  no_log: true
  changed_when: false

- name: Get Hub cluster API URL
  ansible.builtin.shell:
    cmd: |
      export AWS_DEFAULT_PROFILE=rosa_{{ rosa_cluster_name }}
      rosa describe cluster --cluster=hub --output=json | jq -r '.api.url'
  register: hub_api_url
  failed_when: "'Not logged in' in hub_api_url.stderr or 'Failed to find credentials' in hub_api_url.stderr"

- name: Set Hub API URL
  ansible.builtin.set_fact:
    hub_api_url: "{{ hub_api_url.stdout }}"

- name: Retrieve Hub authentication token
  community.okd.openshift_auth:
    username: "{{ rosa_admin_username }}"
    password: "{{ rosa_admin_password }}"
    host: "{{ hub_api_url }}"
    validate_certs: false
  register: hub_openshift_auth_results

- name: "Delete {{ rosa_cluster_name }} from ACM"
  kubernetes.core.k8s:
    resource_definition:
      apiVersion: cluster.open-cluster-management.io/v1
      kind: ManagedCluster
      metadata:
        name: "{{ rosa_cluster_name }}"
    state: absent
    host: "{{ hub_api_url }}"
    api_key: "{{ hub_openshift_auth_results.openshift_auth.api_key }}"
    validate_certs: false

- name: Set S3 bucket name
  ansible.builtin.set_fact:
    s3_bucket_name: "{{ rosa_cluster_name }}-terraform"

- name: Copy terraform module to work_dir
  ansible.builtin.copy:
    src: files/rosa/terraform/
    remote_src: false
    dest: "{{ work_dir }}/{{ rosa_cluster_name }}/terraform/"

- name: Copy terraform files to work_dir
  ansible.builtin.template:
    src: "rosa/{{ item }}"
    dest: "{{ work_dir }}/{{ rosa_cluster_name }}/terraform/{{ item }}"
  with_items:
    - terraform.tfvars.json
    - data.tf
    - providers.tf

- name: Copy terraform components to work_dir
  ansible.builtin.copy:
    src: files/privatelink/terraform/
    remote_src: false
    dest: "{{ work_dir }}/{{ rosa_cluster_name }}/privatelink/terraform/"

- name: Copy terraform files to work_dir
  ansible.builtin.template:
    src: "privatelink/{{ item }}"
    dest: "{{ work_dir }}/{{ rosa_cluster_name }}/privatelink/terraform/{{ item }}"
  with_items:
    - spoke.tfvars.json
    - data.tf
    - privatelink.tf
    - providers.tf

- name: "Delete {{ rosa_cluster_name }}'s PrivateLink"
  environment:
    TF_BACKEND_BUCKET: "{{ rosa_cluster_name }}-terraform"
    TF_VAR_token: "{{ rosa_token }}"
    AWS_DEFAULT_PROFILE: "rosa_{{ rosa_cluster_name }}"
  cloud.terraform.terraform:
    project_path: "{{ work_dir }}/{{ rosa_cluster_name }}/privatelink/terraform"
    state: absent
  register: rh_privatelink_delete

- name: "Show output"
  ansible.builtin.debug:
    msg: "{{ rh_privatelink_delete.outputs }}"

- name: "Destroy ROSA cluster: {{ rosa_cluster_name }}"
  environment:
    TF_BACKEND_BUCKET: "{{ rosa_cluster_name }}-terraform"
    AWS_DEFAULT_PROFILE: "rosa_{{ rosa_cluster_name }}"
  ansible.builtin.shell:
    cmd: |
      cd "{{ work_dir }}/{{ rosa_cluster_name }}/terraform"
      terraform destroy -auto-approve
  async: 7200
  poll: 0
  register: create_cluster

- name: "Wait for cluster to be destroyed"
  ansible.builtin.async_status:
    jid: "{{ create_cluster.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 240
  delay: 30